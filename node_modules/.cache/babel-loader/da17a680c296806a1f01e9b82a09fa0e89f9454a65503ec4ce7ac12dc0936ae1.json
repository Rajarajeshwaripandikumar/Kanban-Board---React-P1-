{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandy\\\\Desktop\\\\kanban\\\\src\\\\components\\\\TaskBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport { DndContext, DragOverlay, closestCenter, PointerSensor, useSensor, useSensors } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport Column from \"./Column.jsx\";\nimport TaskCard from \"./TaskCard.jsx\";\nimport { useTasks } from \"../context/TaskContext.jsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TaskBoard() {\n  _s();\n  const {\n    tasks,\n    dispatch,\n    STATUSES\n  } = useTasks();\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 6\n    }\n  }));\n\n  // group by status, sorted by sort\n  const columns = useMemo(() => {\n    const map = Object.fromEntries(STATUSES.map(s => [s, []]));\n    for (const t of tasks) {\n      map[t.status] = map[t.status] || [];\n      map[t.status].push(t);\n    }\n    for (const k of Object.keys(map)) {\n      map[k].sort((a, b) => {\n        var _a$sort, _b$sort;\n        return ((_a$sort = a.sort) !== null && _a$sort !== void 0 ? _a$sort : 0) - ((_b$sort = b.sort) !== null && _b$sort !== void 0 ? _b$sort : 0);\n      });\n    }\n    return map;\n  }, [tasks, STATUSES]);\n  const [activeId, setActiveId] = React.useState(null);\n  function handleDragStart(event) {\n    setActiveId(event.active.id);\n  }\n  function handleDragOver() {\n    // optional: implement preview movement while dragging (left simple)\n  }\n  function handleDragEnd(event) {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (!over) return;\n    const activeTask = tasks.find(t => t.id === active.id);\n    const overTask = tasks.find(t => t.id === over.id);\n\n    // if dropped onto a column (over.id is column id) or onto a task\n    const destStatus = overTask ? overTask.status : over.id;\n    if (!destStatus || !STATUSES.includes(destStatus)) return;\n    if (activeTask.status !== destStatus) {\n      // move to new column end\n      dispatch({\n        type: \"UPDATE\",\n        id: active.id,\n        updates: {\n          status: destStatus,\n          sort: columns[destStatus].length\n        }\n      });\n    } else if (overTask && active.id !== over.id) {\n      // reorder within same column\n      const col = columns[destStatus].map(t => t.id);\n      const oldIndex = col.indexOf(active.id);\n      const newIndex = col.indexOf(overTask.id);\n      if (oldIndex !== -1 && newIndex !== -1 && oldIndex !== newIndex) {\n        const newOrder = arrayMove(col, oldIndex, newIndex);\n        // write back sorts\n        newOrder.forEach((id, idx) => {\n          dispatch({\n            type: \"UPDATE\",\n            id,\n            updates: {\n              sort: idx\n            }\n          });\n        });\n      }\n    }\n  }\n  const activeTask = tasks.find(t => t.id === activeId);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-6\",\n      children: /*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        collisionDetection: closestCenter,\n        onDragStart: handleDragStart,\n        onDragOver: handleDragOver,\n        onDragEnd: handleDragEnd,\n        children: [STATUSES.map(s => /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: columns[s].map(t => t.id),\n          strategy: verticalListSortingStrategy,\n          children: /*#__PURE__*/_jsxDEV(Column, {\n            id: s,\n            title: s === \"todo\" ? \"To Do\" : s === \"inprogress\" ? \"In Progress\" : \"Done\",\n            items: columns[s]\n          }, s, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, s, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(DragOverlay, {\n          children: activeTask ? /*#__PURE__*/_jsxDEV(TaskCard, {\n            task: activeTask,\n            dragOverlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 38\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(TaskBoard, \"NxoGlaz+sjJe385o/VQUYgIeacY=\", false, function () {\n  return [useTasks, useSensors, useSensor];\n});\n_c = TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["React","useMemo","DndContext","DragOverlay","closestCenter","PointerSensor","useSensor","useSensors","arrayMove","SortableContext","verticalListSortingStrategy","Column","TaskCard","useTasks","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskBoard","_s","tasks","dispatch","STATUSES","sensors","activationConstraint","distance","columns","map","Object","fromEntries","s","t","status","push","k","keys","sort","a","b","_a$sort","_b$sort","activeId","setActiveId","useState","handleDragStart","event","active","id","handleDragOver","handleDragEnd","over","activeTask","find","overTask","destStatus","includes","type","updates","length","col","oldIndex","indexOf","newIndex","newOrder","forEach","idx","children","className","collisionDetection","onDragStart","onDragOver","onDragEnd","items","strategy","title","fileName","_jsxFileName","lineNumber","columnNumber","task","dragOverlay","_c","$RefreshReg$"],"sources":["C:/Users/Pandy/Desktop/kanban/src/components/TaskBoard.jsx"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { DndContext, DragOverlay, closestCenter, PointerSensor, useSensor, useSensors } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport Column from \"./Column.jsx\";\r\nimport TaskCard from \"./TaskCard.jsx\";\r\nimport { useTasks } from \"../context/TaskContext.jsx\";\r\n\r\nexport default function TaskBoard() {\r\n  const { tasks, dispatch, STATUSES } = useTasks();\r\n\r\n  const sensors = useSensors(useSensor(PointerSensor, { activationConstraint: { distance: 6 } }));\r\n\r\n  // group by status, sorted by sort\r\n  const columns = useMemo(() => {\r\n    const map = Object.fromEntries(STATUSES.map(s => [s, []]));\r\n    for (const t of tasks) {\r\n      map[t.status] = map[t.status] || [];\r\n      map[t.status].push(t);\r\n    }\r\n    for (const k of Object.keys(map)) {\r\n      map[k].sort((a,b) => (a.sort ?? 0) - (b.sort ?? 0));\r\n    }\r\n    return map;\r\n  }, [tasks, STATUSES]);\r\n\r\n  const [activeId, setActiveId] = React.useState(null);\r\n\r\n  function handleDragStart(event) {\r\n    setActiveId(event.active.id);\r\n  }\r\n\r\n  function handleDragOver() {\r\n    // optional: implement preview movement while dragging (left simple)\r\n  }\r\n\r\n  function handleDragEnd(event) {\r\n    const { active, over } = event;\r\n    setActiveId(null);\r\n    if (!over) return;\r\n\r\n    const activeTask = tasks.find(t => t.id === active.id);\r\n    const overTask = tasks.find(t => t.id === over.id);\r\n\r\n    // if dropped onto a column (over.id is column id) or onto a task\r\n    const destStatus = overTask ? overTask.status : over.id;\r\n\r\n    if (!destStatus || !STATUSES.includes(destStatus)) return;\r\n\r\n    if (activeTask.status !== destStatus) {\r\n      // move to new column end\r\n      dispatch({ type: \"UPDATE\", id: active.id, updates: { status: destStatus, sort: (columns[destStatus].length) } });\r\n    } else if (overTask && active.id !== over.id) {\r\n      // reorder within same column\r\n      const col = columns[destStatus].map(t => t.id);\r\n      const oldIndex = col.indexOf(active.id);\r\n      const newIndex = col.indexOf(overTask.id);\r\n      if (oldIndex !== -1 && newIndex !== -1 && oldIndex !== newIndex) {\r\n        const newOrder = arrayMove(col, oldIndex, newIndex);\r\n        // write back sorts\r\n        newOrder.forEach((id, idx) => {\r\n          dispatch({ type: \"UPDATE\", id, updates: { sort: idx } });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const activeTask = tasks.find(t => t.id === activeId);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex gap-6\">\r\n        <DndContext sensors={sensors} collisionDetection={closestCenter} onDragStart={handleDragStart} onDragOver={handleDragOver} onDragEnd={handleDragEnd}>\r\n          {STATUSES.map((s) => (\r\n            <SortableContext key={s} items={columns[s].map(t => t.id)} strategy={verticalListSortingStrategy}>\r\n              <Column key={s} id={s} title={s === \"todo\" ? \"To Do\" : s === \"inprogress\" ? \"In Progress\" : \"Done\"} items={columns[s]} />\r\n            </SortableContext>\r\n          ))}\r\n          <DragOverlay>{activeTask ? <TaskCard task={activeTask} dragOverlay /> : null}</DragOverlay>\r\n        </DndContext>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
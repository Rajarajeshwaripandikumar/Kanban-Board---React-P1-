{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandy\\\\Desktop\\\\kanban\\\\src\\\\components\\\\TaskBoard.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useTasks } from \"../context/TaskContext\";\nimport TaskCard from \"./TaskCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskBoard = () => {\n  _s();\n  const {\n    tasks,\n    updateTask\n  } = useTasks();\n  const columns = [\"To Do\", \"In Progress\", \"Done\"];\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // If dropped in same column, do nothing\n    if (source.droppableId === destination.droppableId) return;\n    const newStatus = columns[destination.droppableId];\n\n    // Update task status -> will persist via context\n    updateTask(draggableId, {\n      status: newStatus\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\",\n      children: columns.map((col, index) => {\n        const colTasks = tasks.filter(t => t.status === col);\n        return /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: `${index}`,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            className: \"bg-gray-100 rounded-2xl shadow-md p-4 min-h-[400px] flex flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-normal text-gray-800 mb-4 flex justify-between\",\n              children: [col, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-sm text-gray-500\",\n                children: [\"(\", colTasks.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this), colTasks.map((task, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id,\n              index: idx,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                className: \"mb-3\",\n                children: /*#__PURE__*/_jsxDEV(TaskCard, {\n                  task: task\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 25\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this)\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskBoard, \"/+pN/031f1zdKrbDZObFaJMMAag=\", false, function () {\n  return [useTasks];\n});\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["React","DragDropContext","Droppable","Draggable","useTasks","TaskCard","jsxDEV","_jsxDEV","TaskBoard","_s","tasks","updateTask","columns","handleDragEnd","result","destination","draggableId","source","droppableId","newStatus","status","onDragEnd","children","className","map","col","index","colTasks","filter","t","provided","ref","innerRef","droppableProps","length","fileName","_jsxFileName","lineNumber","columnNumber","task","idx","id","draggableProps","dragHandleProps","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Pandy/Desktop/kanban/src/components/TaskBoard.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { useTasks } from \"../context/TaskContext\";\r\nimport TaskCard from \"./TaskCard\";\r\n\r\nconst TaskBoard = () => {\r\n  const { tasks, updateTask } = useTasks();\r\n  const columns = [\"To Do\", \"In Progress\", \"Done\"];\r\n\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n\r\n    const { draggableId, source, destination } = result;\r\n\r\n    // If dropped in same column, do nothing\r\n    if (source.droppableId === destination.droppableId) return;\r\n\r\n    const newStatus = columns[destination.droppableId];\r\n\r\n    // Update task status -> will persist via context\r\n    updateTask(draggableId, { status: newStatus });\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleDragEnd}>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\">\r\n        {columns.map((col, index) => {\r\n          const colTasks = tasks.filter((t) => t.status === col);\r\n          return (\r\n            <Droppable droppableId={`${index}`} key={col}>\r\n              {(provided) => (\r\n                <div\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                  className=\"bg-gray-100 rounded-2xl shadow-md p-4 min-h-[400px] flex flex-col\"\r\n                >\r\n                  <h2 className=\"text-lg font-normal text-gray-800 mb-4 flex justify-between\">\r\n                    {col}\r\n                    <span className=\"text-sm text-gray-500\">\r\n                      ({colTasks.length})\r\n                    </span>\r\n                  </h2>\r\n\r\n                  {colTasks.map((task, idx) => (\r\n                    <Draggable key={task.id} draggableId={task.id} index={idx}>\r\n                      {(provided) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          className=\"mb-3\"\r\n                        >\r\n                          <TaskCard task={task} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          );\r\n        })}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default TaskBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
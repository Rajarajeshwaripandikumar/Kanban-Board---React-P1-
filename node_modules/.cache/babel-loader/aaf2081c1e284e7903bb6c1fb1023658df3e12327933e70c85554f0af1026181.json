{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandy\\\\Desktop\\\\kanban\\\\src\\\\components\\\\TaskBoard.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useTasks } from \"../context/TaskContext\";\nimport TaskCard from \"./TaskCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskBoard = () => {\n  _s();\n  const {\n    tasks,\n    updateTask\n  } = useTasks();\n  const columns = [\"To Do\", \"In Progress\", \"Done\"];\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const {\n      draggableId,\n      destination\n    } = result;\n    const newStatus = columns[destination.droppableId];\n    updateTask(draggableId, {\n      status: newStatus\n    });\n  };\n\n  // Tailwind classes for each column\n  const columnColors = {\n    \"To Do\": \"bg-orange-100\",\n    \"In Progress\": \"bg-green-100\",\n    \"Done\": \"bg-pink-100\"\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\",\n      children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: `${index}`,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          className: `${columnColors[col]} rounded-2xl shadow-md p-4 min-h-[500px] flex flex-col`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-700 mb-4\",\n            children: col\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this), tasks.filter(t => t.status === col).map((task, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: idx,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              className: \"mb-3\",\n              children: /*#__PURE__*/_jsxDEV(TaskCard, {\n                task: task\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 25\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this)\n      }, col, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskBoard, \"/+pN/031f1zdKrbDZObFaJMMAag=\", false, function () {\n  return [useTasks];\n});\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["React","DragDropContext","Droppable","Draggable","useTasks","TaskCard","jsxDEV","_jsxDEV","TaskBoard","_s","tasks","updateTask","columns","handleDragEnd","result","destination","draggableId","newStatus","droppableId","status","columnColors","onDragEnd","children","className","map","col","index","provided","ref","innerRef","droppableProps","fileName","_jsxFileName","lineNumber","columnNumber","filter","t","task","idx","id","draggableProps","dragHandleProps","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Pandy/Desktop/kanban/src/components/TaskBoard.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { useTasks } from \"../context/TaskContext\";\r\nimport TaskCard from \"./TaskCard\";\r\n\r\nconst TaskBoard = () => {\r\n  const { tasks, updateTask } = useTasks();\r\n  const columns = [\"To Do\", \"In Progress\", \"Done\"];\r\n\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    const { draggableId, destination } = result;\r\n    const newStatus = columns[destination.droppableId];\r\n    updateTask(draggableId, { status: newStatus });\r\n  };\r\n\r\n  // Tailwind classes for each column\r\n  const columnColors = {\r\n    \"To Do\": \"bg-orange-100\",\r\n    \"In Progress\": \"bg-green-100\",\r\n    \"Done\": \"bg-pink-100\",\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleDragEnd}>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\">\r\n        {columns.map((col, index) => (\r\n          <Droppable droppableId={`${index}`} key={col}>\r\n            {(provided) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                className={`${columnColors[col]} rounded-2xl shadow-md p-4 min-h-[500px] flex flex-col`}\r\n              >\r\n                <h2 className=\"text-xl font-bold text-gray-700 mb-4\">{col}</h2>\r\n\r\n                {tasks\r\n                  .filter((t) => t.status === col)\r\n                  .map((task, idx) => (\r\n                    <Draggable key={task.id} draggableId={task.id} index={idx}>\r\n                      {(provided) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          className=\"mb-3\"\r\n                        >\r\n                          <TaskCard task={task} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default TaskBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}